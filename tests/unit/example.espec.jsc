import Vue from 'vue'
import Vuelidate from 'vuelidate'
import { shallowMount, mount } from '@vue/test-utils'

Vue.use(Vuelidate);

import Form from '@/components/Form.vue'

const getComponent = (data = {}) => {
  return shallowMount(Form, {
    data() {
      return {
        ...data
      }
    }
  })
}

describe('Form.vue', () => {

  it('renders props.msg when passed', () => {
    const component = getComponent();
    expect(component.isVueInstance()).toBeTruthy();
  });

  it('check if form is invalid when not inform the fields', () => {
    const component = getComponent();
    expect(component.vm.$v.usuario.nome.$invalid).toBe(true)
    expect(component.vm.$v.usuario.email.$invalid).toBe(true)
    expect(component.vm.$v.usuario.$invalid).toBeTruthy()
  })

  it('check if form is invalid when inform invalid name', () => {
  
    const component = getComponent({
            usuario: {
              nome: '',
              email: 'email@email.com.br'
            }
          })


    component.vm.$v.$touch();

    expect(component.vm.$v.usuario.nome.$invalid).toBe(true)
    expect(component.vm.$v.usuario.email.$invalid).toBe(false)
    expect(component.vm.$v.usuario.$invalid).toBeTruthy()

    const error = component.find('.error')
    expect(error.text(0)).toBe('Field is required')

  })

  it('check if form is invalid when inform invalid name less than 4 digits', () => {
  
    const component = getComponent({
            usuario: {
              nome: 'coo',
              email: 'email@email.com.br'
            }
          })


    component.vm.$v.$touch();

    expect(component.vm.$v.usuario.nome.$invalid).toBe(true)
    expect(component.vm.$v.usuario.email.$invalid).toBe(false)
    expect(component.vm.$v.usuario.$invalid).toBeTruthy()

    const error = component.find('.error')
    expect(error.text(0)).toBe('Name must have at least 4 letters.')

  })

  it('check if form is valid when inform the fields', () => {
  
    const component = getComponent({
            usuario: {
              nome: 'Teste cool',
              email: 'email@email.com.br'
            }
          })

    expect(component.vm.$v.usuario.nome.$invalid).toBe(false)
    expect(component.vm.$v.usuario.email.$invalid).toBe(false)
    expect(component.vm.$v.usuario.$invalid).toBeFalsy()

  })  

})
